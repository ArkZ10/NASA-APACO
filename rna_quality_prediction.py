# -*- coding: utf-8 -*-
"""RNA-Quality-Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eqZccwaTUsoVwjFwhQXrQ4nqvLYJAEco
"""

!git clone https://github.com/ArkZ10/APACO.git

import json
import pandas as pd

with open('/content/APACO/multiqc_data_665.json') as f:
    data = json.load(f)

with open('/content/APACO/multiqc_data_379.json') as f:
    data_379 = json.load(f)

general_stats_379 = data_379['report_general_stats_data']

general_stats = data['report_general_stats_data']

flight_samples = {}
hgc_samples = {}
vgc_samples = {}


for entry in general_stats:
  for sample_name, stats in entry.items():
      if "FLT" in sample_name:
          flight_samples[sample_name] = stats
      elif "GC" in sample_name:
          hgc_samples[sample_name] = stats
      elif "VIV" in sample_name:
          vgc_samples[sample_name] = stats

print(f"Flight samples: {len(flight_samples)}")
print(f"HGC samples: {len(hgc_samples)}")
print(f"VGC samples: {len(vgc_samples)}")

import pandas as pd

summary = []

for entry in general_stats:
    for sample, stats in entry.items():
        sample_summary = {
            'Sample': sample,
            'GC Content (%)': stats.get('percent_gc', 'N/A'),
            'Average Sequence Length': stats.get('avg_sequence_length', 'N/A'),
            'Total Sequences': stats.get('total_sequences', 'N/A'),
            'Duplication Rate (%)': stats.get('percent_duplicates', 'N/A'),
            'Failed Sequences (%)': stats.get('percent_fails', 'N/A')
        }
        summary.append(sample_summary)

summary_665_df = pd.DataFrame(summary)
summary_665_df.to_csv('/content/multiqc_summary_665.csv', index=False)

summary = []

for entry in general_stats_379:
    for sample, stats in entry.items():
        sample_summary = {
            'Sample': sample,
            'GC Content (%)': stats.get('percent_gc', 'N/A'),
            'Average Sequence Length': stats.get('avg_sequence_length', 'N/A'),
            'Total Sequences': stats.get('total_sequences', 'N/A'),
            'Duplication Rate (%)': stats.get('percent_duplicates', 'N/A'),
            'Failed Sequences (%)': stats.get('percent_fails', 'N/A')
        }
        summary.append(sample_summary)

summary_379_df = pd.DataFrame(summary)
summary_379_df.to_csv('/content/multiqc_summary_379.csv', index=False)

df = pd.concat([summary_665_df, summary_379_df], ignore_index=True)
df.head()

df.info()

mean_duplication_rate = df['Failed Sequences (%)'].mean()

print(f"The mean duplication rate is: {mean_duplication_rate:.2f}%")

df['quality_label'] = df.apply(lambda row: 0 if (row['Duplication Rate (%)'] > 77.70 or row['Failed Sequences (%)'] > 28) else 1, axis=1)

df['quality_label'].value_counts()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X = df[['GC Content (%)', 'Total Sequences', 'Duplication Rate (%)', 'Failed Sequences (%)']]
y = df['quality_label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

train_accuracy = model.score(X_train, y_train)
print(f'Training Accuracy: {train_accuracy * 100:.2f}%')

test_accuracy = model.score(X_test, y_test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

