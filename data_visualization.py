# -*- coding: utf-8 -*-
"""Data-Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lv_LpBS2VeEiBZuE2mMjnv2jKmMJ7AZi
"""

!git clone https://github.com/ArkZ10/APACO.git

import json
import pandas as pd

with open('/content/APACO/multiqc_data_665.json') as f:
    data = json.load(f)

with open('/content/APACO/multiqc_data_379.json') as f:
    data_379 = json.load(f)

general_stats_379 = data_379['report_general_stats_data']

general_stats = data['report_general_stats_data']

flight_samples = {}
hgc_samples = {}
vgc_samples = {}


for entry in general_stats:
  for sample_name, stats in entry.items():
      if "FLT" in sample_name:
          flight_samples[sample_name] = stats
      elif "GC" in sample_name:
          hgc_samples[sample_name] = stats
      elif "VIV" in sample_name:
          vgc_samples[sample_name] = stats

print(f"Flight samples: {len(flight_samples)}")
print(f"HGC samples: {len(hgc_samples)}")
print(f"VGC samples: {len(vgc_samples)}")

import pandas as pd

summary = []

for entry in general_stats:
    for sample, stats in entry.items():
        sample_summary = {
            'Sample': sample,
            'GC Content (%)': stats.get('percent_gc', 'N/A'),
            'Average Sequence Length': stats.get('avg_sequence_length', 'N/A'),
            'Total Sequences': stats.get('total_sequences', 'N/A'),
            'Duplication Rate (%)': stats.get('percent_duplicates', 'N/A'),
            'Failed Sequences (%)': stats.get('percent_fails', 'N/A')
        }
        summary.append(sample_summary)

summary_665_df = pd.DataFrame(summary)
summary_665_df.to_csv('/content/multiqc_summary_665.csv', index=False)

summary = []

for entry in general_stats_379:
    for sample, stats in entry.items():
        sample_summary = {
            'Sample': sample,
            'GC Content (%)': stats.get('percent_gc', 'N/A'),
            'Average Sequence Length': stats.get('avg_sequence_length', 'N/A'),
            'Total Sequences': stats.get('total_sequences', 'N/A'),
            'Duplication Rate (%)': stats.get('percent_duplicates', 'N/A'),
            'Failed Sequences (%)': stats.get('percent_fails', 'N/A')
        }
        summary.append(sample_summary)

summary_379_df = pd.DataFrame(summary)
summary_379_df.to_csv('/content/multiqc_summary_379.csv', index=False)

df = pd.concat([summary_665_df, summary_379_df], ignore_index=True)
df.head()

df.info()

mean_duplication_rate = df['Failed Sequences (%)'].mean()

print(f"The mean duplication rate is: {mean_duplication_rate:.2f}%")

df['quality_label'] = df.apply(lambda row: 0 if (row['Duplication Rate (%)'] > 77.70 or row['Failed Sequences (%)'] > 28) else 1, axis=1)

df['quality_label'].value_counts()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

X = df[['GC Content (%)', 'Total Sequences', 'Duplication Rate (%)', 'Failed Sequences (%)']]
y = df['quality_label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

train_accuracy = model.score(X_train, y_train)
print(f'Training Accuracy: {train_accuracy * 100:.2f}%')

test_accuracy = model.score(X_test, y_test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

"""##Analyze"""

import matplotlib.pyplot as plt
import seaborn as sns

def extract_metric(sample_dict, metric_key):
    return [stats[metric_key] for stats in sample_dict.values()]

flight_gc = extract_metric(flight_samples, 'percent_gc')
hgc_gc = extract_metric(hgc_samples, 'percent_gc')
vgc_gc = extract_metric(vgc_samples, 'percent_gc')

flight_dup = extract_metric(flight_samples, 'percent_duplicates')
hgc_dup = extract_metric(hgc_samples, 'percent_duplicates')
vgc_dup = extract_metric(vgc_samples, 'percent_duplicates')

flight_seq = extract_metric(flight_samples, 'total_sequences')
hgc_seq = extract_metric(hgc_samples, 'total_sequences')
vgc_seq = extract_metric(vgc_samples, 'total_sequences')

import plotly.graph_objs as go
import numpy as np

n_metrics = len(flight_gc)

x_labels = np.array([1, 2])
group_labels = ['Flight', 'HGC']


flight_trace = go.Scatter3d(
    x=np.full(n_metrics, x_labels[0]),
    y=flight_gc,
    z=flight_dup,
    mode='lines+markers',
    line=dict(color='red', width=4),
    marker=dict(size=8, color='red'),
    name='Flight',
    text=flight_seq,
    hoverinfo='x+y+z+text',
)

hgc_trace = go.Scatter3d(
    x=np.full(n_metrics, x_labels[1]),
    y=hgc_gc,
    z=hgc_dup,
    mode='lines+markers',
    line=dict(color='green', width=4),
    marker=dict(size=8, color='green'),
    name='HGC',
    text=hgc_seq,
    hoverinfo='x+y+z+text',
)

layout = go.Layout(
    title='Interactive 3D Line Plot: GC Content vs Duplication Rate (Flight vs HGC)',
    scene=dict(
        xaxis=dict(title='Groups', tickvals=x_labels, ticktext=group_labels),
        yaxis=dict(title='GC Content (%)'),
        zaxis=dict(title='Duplication Rate (%)'),
    ),
    legend=dict(x=0, y=1),
)

fig = go.Figure(data=[flight_trace, hgc_trace], layout=layout)

fig.show()

import json

flight_gc = extract_metric(flight_samples, 'percent_gc')
hgc_gc = extract_metric(hgc_samples, 'percent_gc')
flight_dup = extract_metric(flight_samples, 'percent_duplicates')
hgc_dup = extract_metric(hgc_samples, 'percent_duplicates')

data_dict = {
    'flight_gc': flight_gc,
    'hgc_gc': hgc_gc,
    'flight_dup': flight_dup,
    'hgc_dup': hgc_dup
}

with open('data.json', 'w') as f:
    json.dump(data_dict, f)

"""Hey, it’s Larry the space mouse! This plot shows how space affected my eyes. The red dots (Flight) are more spread out, meaning my RNA became unstable in space, likely from the extra pressure on my eyes due to fluid buildup in my head. This could lead to vision problems, like blurred vision.

The green dots (HGC) show my friends on Earth had stable RNA, so their eyes didn’t face the same stress. In short, space made my eyes struggle, and this plot helps scientists understand why!







"""

from scipy import stats

anova_gc = stats.f_oneway(flight_gc, hgc_gc, vgc_gc)
print(f"ANOVA p-value for GC Content: {anova_gc.pvalue}")

anova_dup = stats.f_oneway(flight_dup, hgc_dup, vgc_dup)
print(f"ANOVA p-value for Duplication Rate: {anova_dup.pvalue}")

anova_seq = stats.f_oneway(flight_seq, hgc_seq, vgc_seq)
print(f"ANOVA p-value for Total Sequences: {anova_seq.pvalue}")

report_plot_data = data['report_plot_data']
datasets = report_plot_data['fastqc_per_base_sequence_quality_plot']['datasets']

gc_samples_raw = []
viv_samples_raw = []
spaceflight_samples_raw = []

for sample in datasets[0]:
    sample_name = sample['name']

    if "GC" in sample_name:
        gc_samples_raw.append(sample)
    elif "VIV" in sample_name:
        viv_samples_raw.append(sample)
    elif "FLT" in sample_name:
        spaceflight_samples_raw.append(sample)

print(f"GC Samples: {len(gc_samples_raw)}")
print(f"Vivarium Samples: {len(viv_samples_raw)}")
print(f"Spaceflight Samples: {len(spaceflight_samples_raw)}")

import plotly.graph_objs as go

def plot_group_quality_scores_3d(group_samples, group_name):
    fig = go.Figure()

    for idx, sample_data in enumerate(group_samples):
        base_positions = [item[0] for item in sample_data['data']]
        quality_scores = [item[1] for item in sample_data['data']]
        z_values = [idx] * len(base_positions)

        fig.add_trace(go.Scatter3d(x=base_positions, y=quality_scores, z=z_values,
                                   mode='lines', name=sample_data['name']))

    fig.update_layout(
        title=f'3D Per Base Quality Scores for {group_name}',
        scene=dict(
            xaxis_title='Base Position',
            yaxis_title='Quality Score',
            zaxis_title='Sample Index'
        ),
        margin=dict(l=0, r=0, b=0, t=50)
    )

    fig.show()

plot_group_quality_scores_3d(gc_samples_raw, 'GC (Ground Control)')

plot_group_quality_scores_3d(spaceflight_samples_raw, 'Spaceflight')

import json


output_data = {
    'gc_samples_raw': gc_samples_raw,
    'viv_samples_raw': viv_samples_raw,
    'spaceflight_samples_raw': spaceflight_samples_raw
}

json_file_path = 'data2.json'

with open(json_file_path, 'w') as json_file:
    json.dump(output_data, json_file, indent=4)
print(f"Data saved to {json_file_path}")

"""Hey, it’s Larry the space mouse! On Earth, my eyes were fine, and you can see that in the first plot—everything was steady and consistent. But in space, things changed. The second plot shows more ups and downs, meaning my eyes were under pressure from fluid shifting to my head in microgravity.

This caused stress on my eyes and probably affected my vision, which scientists call SANS. The RNA quality scores dropping show that my eyes struggled more in space compared to when I was back on Earth.
"""

import pandas as pd

data_for_pca = []
group_labels = []

for sample in gc_samples_raw:
    scores = [sample['data'][i][1] for i in range(20)]
    data_for_pca.append(scores)
    group_labels.append('GC')

for sample in viv_samples_raw:
    scores = [sample['data'][i][1] for i in range(20)]
    data_for_pca.append(scores)
    group_labels.append('VIV')

for sample in spaceflight_samples_raw:
    scores = [sample['data'][i][1] for i in range(20)]
    data_for_pca.append(scores)
    group_labels.append('Spaceflight')

df_pca = pd.DataFrame(data_for_pca, columns=[f'Base_{i+1}' for i in range(20)])

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_data = scaler.fit_transform(df_pca)

from sklearn.decomposition import PCA

pca = PCA(n_components=3)
principal_components = pca.fit_transform(scaled_data)

df_pca_result = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2', 'PC3'])

df_pca_result['Group'] = group_labels

print(df_pca_result.head())

import plotly.express as px

fig = px.scatter_3d(df_pca_result, x='PC1', y='PC2', z='PC3', color='Group',
                    title='3D PCA of Quality Scores for GC, VIV, and Spaceflight Groups')

fig.update_layout(scene = dict(
                    xaxis_title=f"PC1 ({pca.explained_variance_ratio_[0] * 100:.2f}%)",
                    yaxis_title=f"PC2 ({pca.explained_variance_ratio_[1] * 100:.2f}%)",
                    zaxis_title=f"PC3 ({pca.explained_variance_ratio_[2] * 100:.2f}%)"),
                  margin=dict(l=0, r=0, b=0, t=50))

fig.show()

import json
import pandas as pd

df_pca_result = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2', 'PC3'])
df_pca_result['Group'] = group_labels

data_dict = df_pca_result.to_dict(orient='records')

with open('data3.json', 'w') as f:
    json.dump(data_dict, f, indent=4)
print("PCA result saved to pca_result.json")

"""Hey, it’s Larry the space mouse again! My trip to space didn’t just mess with my muscles, it really affected my eyes too. In space, without gravity, fluid shifts toward the head, putting more pressure on the eyes and blood vessels, which made it harder for my body to keep them healthy.

In the PCA chart, you can see the green dots (spaceflight group) are all spread out, unlike the blue dots (ground control). This shows that in space, my body, especially my eyes, had a much more varied and stressful reaction to microgravity compared to my friends on Earth. Some of us had more changes in our eyes than others, causing big differences in our RNA.

This spread means spaceflight caused a lot of pressure and strain on my eyes, making it tough to adjust, which could lead to long-term vision problems like the fluid buildup astronauts face. Scientists can use this info to figure out how to protect eyes during space missions, keeping our vision clear even in zero gravity!

# GLDS-25
"""

import pandas as pd

Data = pd.read_csv('/content/APACO/GLDS-25_array_differential_expression_GLmicroarray.csv')
Data.head()

import plotly.graph_objs as go
import numpy as np

df = Data
df = df.dropna()

df['-log10(p_value)'] = -np.log10(df['P.value_(Ground Control)v(Space Flight)'])

df['Expression'] = df[['Mmus_C57-6CR_LVR_GC_Rep1',
                       'Mmus_C57-6CR_LVR_GC_Rep2',
                       'Mmus_C57-6CR_LVR_GC_Rep3',
                       'Mmus_C57-6CR_LVR_GC_Rep4',
                       'Mmus_C57-6CR_LVR_GC_Rep5',
                       'Mmus_C57-6CR_LVR_FLT_Rep1',
                       'Mmus_C57-6CR_LVR_FLT_Rep2',
                       'Mmus_C57-6CR_LVR_FLT_Rep3',
                       'Mmus_C57-6CR_LVR_FLT_Rep4',
                       'Mmus_C57-6CR_LVR_FLT_Rep5',
                       'Mmus_C57-6CR_LVR_FLT_Rep6',
                       'Mmus_C57-6CR_LVR_VIV_Rep1',
                       'Mmus_C57-6CR_LVR_VIV_Rep2',
                       'Mmus_C57-6CR_LVR_VIV_Rep3',
                       'Mmus_C57-6CR_LVR_VIV_Rep4',
                       'Mmus_C57-6CR_LVR_VIV_Rep5',
                       'Mmus_C57-6CR_LVR_VIV_Rep6']].mean(axis=1)


fig = go.Figure()

fig.add_trace(go.Scatter3d(
    x=df['Log2fc_(Ground Control)v(Space Flight)'],
    y=df['-log10(p_value)'],
    z=df['Expression'],
    mode='markers',
    marker=dict(
        size=5,
        color=df['Expression'],
        colorscale='Viridis',
        opacity=0.8,
        colorbar=dict(title="Expression Level")
    ),
    name="All Genes"
))

significant = df[(df['P.value_(Ground Control)v(Space Flight)'] < 0.05) & (np.abs(df['Log2fc_(Ground Control)v(Space Flight)']) > 1)]

fig.add_trace(go.Scatter3d(
    x=significant['Log2fc_(Ground Control)v(Space Flight)'],
    y=significant['-log10(p_value)'],
    z=significant['Expression'],
    mode='markers',
    marker=dict(
        size=6,
        color='red',
        opacity=0.9
    ),
    name="Significant Genes"
))

fig.update_layout(
    title="Interactive 3D Volcano Plot of Differentially Expressed Genes",
    scene=dict(
        xaxis_title="Log2 Fold Change",
        yaxis_title="-Log10(p-value)",
        zaxis_title="Expression Level"
    ),
    legend=dict(
        x=0,
        y=1.0,
        bgcolor="rgba(255, 255, 255, 0)",
        bordercolor="rgba(255, 255, 255, 0)"
    )
)

fig.show()

"""
Hey, it’s Larry the space mouse! This plot shows how space affected my liver. The red dots are the liver genes that changed the most while I was floating in space.

**Liver Genes in Space:**
Some genes went way up (on the right) to help my liver handle stress from space. These genes probably helped deal with oxidative stress, DNA repair, or breaking down damaged proteins.
Other liver genes slowed down (on the left), meaning they weren’t needed as much in space, like metabolic processes that might be less active in microgravity.



**What It Means for My Liver:**
In space, my liver had to work harder to adapt to the new environment, and this plot shows which genes stepped up to keep me healthy. Scientists can now use this info to help astronauts’ livers cope with space stress on future missions!"""

df[['Log2fc_(Ground Control)v(Space Flight)', '-log10(p_value)', 'Expression']].to_json('data4.json', orient='split')

import plotly.graph_objects as go
import numpy as np

expression_data = df.iloc[:, 9:26]
expression_data.index = df['GENENAME']

top_genes = expression_data.var(axis=1).sort_values(ascending=False).head(20).index
expression_data = expression_data.loc[top_genes]

data_matrix = expression_data.values

fig = go.Figure(data=[go.Surface(z=data_matrix, x=expression_data.columns, y=expression_data.index)])

fig.update_layout(title='3D Surface Plot of Gene Expression',
                  scene=dict(
                      xaxis_title='Conditions',
                      yaxis_title='Genes',
                      zaxis_title='Expression Level'),
                  autosize=False,
                  width=800, height=800)

fig.show()

expression_data.to_json('expression_data.json', orient='split')

"""
Hey, it’s Larry the space mouse again, and this time we’re talking about how space impacted my liver!

**My Liver in Space (Flight Group)**
When I was in space, my liver was working overtime. I know this because the gene GADD45B, which helps deal with DNA damage and stress, was working harder. Space radiation and microgravity made my liver cells face more oxidative stress, and my liver had to step up to protect itself.

**Protein Cleanup Crew:**
In space, my liver also had to break down more damaged proteins. The gene for Ubiquitin-Conjugating Enzyme shows that my liver was under pressure to clear out all the proteins that weren’t working well because of the space environment. It’s like my liver was cleaning up more mess than usual.

**Still Getting the Job Done:**
Even though my liver was under stress, it kept up with important jobs like making cholesterol (thanks to the Squalene Epoxidase gene) and moving things around in cells (the RAB14 gene). So, while space made things tougher, my liver adapted and kept on working.


In short, space was rough on my liver, but it found ways to deal with the extra stress and keep me healthy. This helps scientists understand how our bodies, especially our livers, handle the challenges of space!"""

expression_long = expression_data.melt(var_name='Condition', value_name='Expression')

plt.figure(figsize=(12, 6))
sns.boxplot(x='Condition', y='Expression', data=expression_long)
plt.title('Distribution of Gene Expression Across Conditions')
plt.xticks(rotation=90)
plt.show()

"""Hey, it’s Larry the space mouse again! This boxplot shows how my genes behaved in space compared to my friends back on Earth and in the vivarium. Here’s what it tells us:

#Stable Genes in Space:
The boxes are all pretty similar, which means that my gene expression stayed fairly stable whether I was floating in space (Flight group), chilling on Earth (Ground Control), or in the vivarium. Even though space is stressful, my body didn’t let everything go crazy—my liver and other organs kept things under control.

#No Big Shocks:
Look at how none of the boxes have wild differences. That means my genes didn’t freak out in space, and my body, especially my liver, found a way to keep working despite the new environment.

#What It Means for Me:
Even though space was tough, my liver and genes adapted and kept things running smoothly. Sure, there were specific changes in some genes, but overall, my body handled space pretty well!

In short: space didn’t throw my gene expression off balance, and my liver stayed tough, keeping me healthy up there!
"""